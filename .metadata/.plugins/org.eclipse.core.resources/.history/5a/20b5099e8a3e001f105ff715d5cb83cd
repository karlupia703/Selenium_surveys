package Testcases;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import java.util.Random;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import io.github.bonigarcia.wdm.WebDriverManager;

public class Survey_testcase {
	public static WebDriver driver;
	
	@BeforeTest
	public void start() {
		WebDriverManager.chromedriver().setup();
		driver =new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("http://localhost:3000/surveys");
			 }
	
	
	
    @Test (priority=1)
	public static void landingPage() {
	System.out.println(driver.getCurrentUrl());
	String currentURL = "http://localhost:3000/surveys";
	
	if(currentURL.equals("http://localhost:3000/surveys")){
	System.out.println("Test Case Landing page is PASS");
	
	}else {
		System.out.println("Test Case Landing page is FAIL");
	}
}


 @Test(priority=2)
 public static void CreateSurvey() throws InterruptedException{
	driver.findElement(By.xpath("/html/body/div[1]/div/div/div[2]/div[1]/button")).click();
	
	//click on create survey button inside
	driver.findElement(By.xpath("/html/body/div[3]/div[3]/div/div[3]/button[2]")).click();
	Thread.sleep(1000);
	
	int survey_id = new Random().nextInt(1000);
    driver.findElement(By.xpath("/html/body/div[3]/div[3]/div/div[2]/div/div/div[1]/div/div/input")).sendKeys("Survey12" + survey_id);
	
	driver.findElement(By.xpath("/html/body/div[3]/div[3]/div/div[2]/div/div/div[2]/div/div/input")).sendKeys("Sur"+ survey_id);
	
	driver.findElement(By.xpath("/html/body/div[3]/div[3]/div/div[2]/div/div/div[3]/div/div/div")).click();
	
	driver.findElement(By.xpath("/html/body/div[4]/div[3]/ul/li[2]/p")).click();
	
	//click on modality
	driver.findElement(By.xpath("/html/body/div[3]/div[3]/div/div[2]/div/div/div[4]/div/div/div")).click();
	
	//select the modality
	driver.findElement(By.xpath("/html/body/div[4]/div[3]/ul/li[1]/p")).click();
	
	//select language
	driver.findElement(By.xpath("/html/body/div[3]/div[3]/div/div[2]/div/div/div[5]/div/div/div")).click();
	driver.findElement(By.xpath("/html/body/div[4]/div[3]/ul/li[2]")).click();
	
	// click on toggle icon
    boolean isMandatory = new Random().nextBoolean();
    
    // printing isMandatory value
    System.out.println(isMandatory);
    
    if(isMandatory) {
	 driver.findElement(By.xpath("html/body/div[3]/div[3]/div/div[2]/div/div/div[6]/label/span[1]/span[1]/input")).click();	
	       
	  //click on create button
	  driver.findElement(By.xpath("/html/body/div[3]/div[3]/div/div[3]/button[2]")).click();   
	  Thread.sleep(1000);
	 
	  
	  
	  RestAssured.baseURI = "http://localhost:3000/surveys";
	  
	  Object surveyPayload;
	//
	   Response response = ((Object) given())
               .header("Content-Type", "application/json")
               .body(surveyPayload)
               .when()
               .post("api/surveys")
               .then()
               .statusCode(201) // Assert that the status code is 201 Created
               .body("id", notNullValue()) // Assert that the response contains an 'id'
               .body("title", equalTo("Customer Satisfaction Survey")) // Assert that the title matches
               .body("description", equalTo("A survey to measure customer satisfaction")) // Assert that the description matches
               .extract()
               .response();

       // Print the response body
       System.out.println("Response Body:");
       System.out.println(response.getBody().toString());

       // Additional validations if necessary
       int surveyId = response.jsonPath().getInt("id");
       String surveyTitle = response.jsonPath().getString("title");
       
       Assert.assertTrue(surveyId > 0, "Survey ID should be greater than 0");
       Assert.assertEquals(surveyTitle, "Customer Satisfaction Survey", "Survey title should match");
   }
	  
	  
	  
	  
	  
	       }
 private static Object equalTo(String string) {
	// TODO Auto-generated method stub
	return null;
}



private static Object notNullValue() {
	// TODO Auto-generated method stub
	return null;
}



private static Object given() {
	// TODO Auto-generated method stub
	return null;
}
}


    
 

private static String Random() {
	// TODO Auto-generated method stub
	return null;
}
 
}